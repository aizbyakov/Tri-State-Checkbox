apply plugin: 'com.android.application'

apply from: 'signUtils.gradle'

android {
    namespace 'com.ai.android.checkbox3.demo'

    def SIGN_CONFIG_RELEASE = getSignConfig('RELEASE', "$rootProject.rootDir/../keystore.properties")

    signingConfigs {
        if (SIGN_CONFIG_RELEASE) release SIGN_CONFIG_RELEASE
    }

    defaultConfig {
        versionCode androidApplicationVersionCode
        versionName androidApplicationVersionName

        minSdk androidApplicationMinSdkVersion
        compileSdk androidApplicationCompileSdkVersion
        targetSdk androidApplicationTargetSdkVersion

        archivesBaseName = "$rootProject.name-$versionName"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (SIGN_CONFIG_RELEASE) signingConfig signingConfigs.release
        }
    }
    flavorDimensions = ["flavorDimentionMain"]

    productFlavors {
        std {
            dimension "flavorDimentionMain"
            applicationId 'com.pctel.seeHawkTouch'
        }
    }

    compileOptions {
        sourceCompatibility javaSourceCompatibility
        targetCompatibility javaTargetCompatibility
    }

    buildFeatures {
        buildConfig true
    }

    lint {
        abortOnError true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':checkbox3')
}

tasks.register("cleanArtifacts", Delete) {
    delete fileTree(dir: "$artifactsDirectory", include: "**/$rootProject.name*.apk")
    delete fileTree(dir: "$artifactsDirectory", include: "**/$rootProject.name*.aab")
}

clean.finalizedBy(cleanArtifacts)

tasks.register("copyArtifacts") {
    doFirst {
        def buildDirectory = layout.buildDirectory.getAsFile().get()
        println "APK"
        println ""

        copyArtifactsImpl("$buildDirectory/outputs/")

        println ""
        println ""

        println "BUNDLE"
        println ""

        copyArtifactsImpl("$buildDirectory/intermediates/apk/")
    }
}

build.finalizedBy(copyArtifacts)

ext.copyArtifactsImpl = { sourceRoot ->
    println "SOURCE: $sourceRoot"
    println "TARGET: $artifactsDirectory"
    println ""

    copy {
        from(fileTree(sourceRoot).files)
        into(artifactsDirectory)
        include('*.apk', '*.aab')

        eachFile {
            println "FILE: $it.relativeSourcePath -> $it.relativePath"
        }
    }
}
